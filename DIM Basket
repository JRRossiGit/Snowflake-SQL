-- SQL Script: Transforming a FACT SALES table into a table that accommodates TY-LY numeric columns
-- Version: 2.0
-- Last Updated: 2024-11-22

-- Step 1: Create a Common Table Expression (CTE) to build the framework based on Dates
WITH CTE_DATE as (SELECT DATE, 
                PY_DATE, 
                YEAR_NUMBER, 
                PERIOD_NUMBER, 
                WEEK_OF_PERIOD_NUMBER, 
                DAY_OF_YEAR_NUMBER
FROM DIM_DATE
),
-- Step 2: Create a Common Table Expression (CTE) to build the structure of weighting and important columns, as well as filter by region
CTE_BASE AS (SELECT DISTINCT BASKET.unique_key as UNIQUE_KEY 
        ,TRANSACTION_DATE
        ,TRANSACTION_ID 
        ,ITEM_ID
        ,BASKET.USER_IDENTIFIER
        ,BANNER_ID 
        ,STORE_NUMBER
        ,ITEM_UNIT_PRICE
        ,FACTORING
        ,WEIGHTING
        ,RD.LAST_UPDATE
        ,ROUND((FACTORING * DEMO_WEIGHT * ITEM_TOTAL), 2) AS ITEM_TOTAL2
        ,ROUND((FACTORING * DEMO_WEIGHT * ITEM_QUANTITY), 0) AS ITEM_QUANTITY2
        ,ROUND((FACTORING * DEMO_WEIGHT * BASKET_QUANTITY), 0) AS BASKET_QUANTITY2
        ,ROUND((FACTORING * DEMO_WEIGHT * BASKET_SUBTOTAL), 2) AS BASKET_SUBTOTAL2
FROM BASKET
INNER JOIN PEOPLE ON PEOPLE.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
INNER JOIN USER_STATS as US ON RD.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
INNER JOIN REGION_DEMOGRAPHICS as RD ON RD.ZIPCODE = PEOPLE.POSTAL_CODE
WHERE RD.REGION_OWNER = 'PLACEHOLDER' -- Filter for the specified region owner
    AND DEMO_WEIGHT IS NOT NULL 
    AND FACTORING IS NOT NULL
    AND RD.LAST_UPDATE = (SELECT MAX(LAST_UPDATE) FROM USER_STATS)
    AND basket.transaction_date >= (SELECT MAX(START_DATE) FROM USER_STATS)
--  THIS CTE GIVES A FRAMEWORK AS WELL AS APPLIES THE WEIGHTING TO THE MOST RECENT TWO YEARS ACCORDING TO STATIC GROUP
UNION
--
SELECT DISTINCT BASKET.unique_key as UNIQUE_KEY
        ,TRANSACTION_DATE
        ,TRANSACTION_ID
        ,ITEM_ID
        ,BASKET.USER_IDENTIFIER as USER_IDENTIFIER
        ,BANNER_ID
        ,STORE_NUMBER
        ,ITEM_UNIT_PRICE
        ,FACTORING
        ,WEIGHTING
        ,RD.LAST_UPDATE
        ,ROUND((FACTORING * WEIGHTING * ITEM_TOTAL), 2) AS ITEM_TOTAL2
        ,ROUND((FACTORING * WEIGHTING * ITEM_QUANTITY), 0) AS ITEM_QUANTITY2
        ,ROUND((FACTORING * WEIGHTING * BASKET_QUANTITY), 0) AS BASKET_QUANTITY2
        ,ROUND((FACTORING * WEIGHTING * BASKET_SUBTOTAL), 2) AS BASKET_SUBTOTAL2
FROM BASKET
INNER JOIN PEOPLE ON PEOPLE.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
INNER JOIN USER_STATS as RD ON RD.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
INNER JOIN REGION_DEMOGRAPHICS as RD ON RD.ZIPCODE = PEOPLE.POSTAL_CODE
WHERE RD.REGION_OWNER = 'PLACEHOLDER' -- Filter for the specified region owner
    AND WEIGHTING IS NOT NULL 
    AND FACTORING IS NOT NULL
    AND RD.LAST_UPDATE = (SELECT DATEADD(YEAR, -1, MAX(LAST_UPDATE)) FROM USER_STATS)
    AND basket.transaction_date <= (SELECT DATEADD(YEAR, -1, MAX(LAST_UPDATE)) FROM USER_STATS)
    AND basket.transaction_date >= (SELECT DATEADD(YEAR, -1, MAX(START_DATE)) FROM USER_STATS)

),
CTE_KEY as(SELECT UNIQUE_KEY
        ,TRANSACTION_DATE
        ,TRANSACTION_ID
        ,ITEM_ID 
        ,USER_IDENTIFIER
        ,BANNER_ID
        ,STORE_NUMBER 
        ,ITEM_UNIT_PRICE
        ,ITEM_TOTAL2
        ,ITEM_QUANTITY2 
        ,BASKET_QUANTITY2
        ,BASKET_SUBTOTAL2
        ,T2.PY_DATE AS PRIOR_YEAR_DATE
        ,T3.DATE AS FUTURE_YEAR_DATE
    FROM CTE_BASE T1
    LEFT JOIN cte_date T2 ON T1.TRANSACTION_DATE = T2.DATE
    LEFT JOIN cte_date T3 ON T1.TRANSACTION_DATE = T3.PY_DATE
),
CTE_MATRIX AS(
    select
        PRIOR_YEAR_DATE,
        unique_key, 
        TRANSACTION_DATE,
        STORE_NUMBER,
        TRANSACTION_ID,
        BANNER_ID,
        USER_IDENTIFIER,
        ITEM_ID
    from cte_key
    UNION
    select
        TRANSACTION_DATE,
        unique_key, 
        FUTURE_YEAR_DATE,
        STORE_NUMBER,
        TRANSACTION_ID,
        BANNER_ID,
        USER_IDENTIFIER,
        ITEM_ID
    from cte_key
)
,
-- Step 4: Create a Common Table Expression (CTE) to work with the Coalesce that will give us the TY-LY columns
COALESCE_CTE as (
SELECT DISTINCT
        m.TRANSACTION_DATE as TRANSACTION_DATE
        ,m.UNIQUE_KEY as UNIQUE_KEY
        ,m.store_number as store_number
        ,m.prior_year_date as prior_year_date
        ,m.TRANSACTION_ID as TRANSACTION_ID
        ,m.BANNER_ID as BANNER_ID
        ,m.USER_IDENTIFIER as USER_IDENTIFIER
        ,m.ITEM_ID as ITEM_ID
        ,coalesce(ty.BASKET_QUANTITY2,0) as BASKET_QUANTITY
        ,coalesce(ty.BASKET_SUBTOTAL2,0) as BASKET_SUBTOTAL
        ,coalesce(ty.ITEM_TOTAL2,0) as ITEM_TOTAL
        ,coalesce(ty.ITEM_QUANTITY2,0) as ITEM_QUANTITY
        ,coalesce(ty.ITEM_UNIT_PRICE,0) as ITEM_UNIT_PRICE
        ,coalesce(ty.TRIP_COUNT,0) as TRIP_COUNT
        ,coalesce(ly.BASKET_QUANTITY2,0) as PY_BASKET_QUANTITY
        ,coalesce(ly.BASKET_SUBTOTAL2,0) as PY_BASKET_SUBTOTAL
        ,coalesce(ly.ITEM_QUANTITY2,0) as PY_ITEM_QUANTITY
        ,coalesce(ly.ITEM_UNIT_PRICE,0) as PY_ITEM_UNIT_PRICE
        ,coalesce(ly.ITEM_TOTAL2,0) as PY_ITEM_TOTAL
        ,coalesce(ly.TRIP_COUNT,0) as PY_TRIP_COUNT
    FROM CTE_MATRIX as m
    LEFT JOIN CTE_BASE as ty
        ON m.UNIQUE_KEY = ty.UNIQUE_KEY
        AND m.STORE_NUMBER = ty.STORE_NUMBER
        AND m.TRANSACTION_DATE = ty.TRANSACTION_DATE
    LEFT JOIN CTE_BASE AS ly
        ON m.UNIQUE_KEY = ly.UNIQUE_KEY
        AND m.STORE_NUMBER = ly.STORE_NUMBER
        AND m.prior_year_date = ly.TRANSACTION_DATE
    LEFT JOIN CTE_DATE as d
        ON m.TRANSACTION_DATE = d.date
        )
-- Step 5: Bring all CTEs together to create a final table as well as create other numeric columns
SELECT  DISTINCT CASE 
            WHEN (DATE_PART('dow', BASKET.TRANSACTION_DATE) + 1) % 7 <= 5 THEN DATEADD(day, 7 - ((DATE_PART('dow', BASKET.TRANSACTION_DATE) + 1) % 7), BASKET.TRANSACTION_DATE)
            ELSE DATEADD(day, 14 - ((DATE_PART('dow', BASKET.TRANSACTION_DATE) + 1) % 7), BASKET.TRANSACTION_DATE)
        END AS PERIOD_DATE,
            UNIQUE_KEY,
            TRANSACTION_ID,
            STORE_NUMBER,
            STORE_ZIP,
            BANNER_ID,
            ITEM_ID,
            USER_IDENTIFIER,
            SUM(BASKET.ITEM_QUANTITY) as ITEM_QUANTITY, 
            SUM(BASKET.ITEM_TOTAL) as ITEM_TOTAL, 
            SUM(BASKET.BASKET_SUBTOTAL) as BASKET_SUBTOTAL, 
            SUM(BASKET.BASKET_QUANTITY) as BASKET_QUANTITY,
            SUM(BASKET.TRIP_COUNT) as TRIP_COUNT,
            SUM(BASKET.PY_ITEM_QUANTITY) as PY_ITEM_QUANTITY, 
            SUM(BASKET.PY_ITEM_TOTAL) as PY_ITEM_TOTAL, 
            SUM(BASKET.PY_BASKET_SUBTOTAL) as PY_BASKET_SUBTOTAL, 
            SUM(BASKET.PY_BASKET_QUANTITY) as PY_BASKET_QUANTITY,
            SUM(BASKET.PY_TRIP_COUNT) as PY_TRIP_COUNT,
            ROUND(
    CASE 
        WHEN SUM(BASKET.ITEM_QUANTITY) = 0 OR SUM(BASKET.ITEM_TOTAL) = 0 THEN 0
        ELSE SUM(BASKET.ITEM_TOTAL) / SUM(BASKET.ITEM_QUANTITY)
    END, 2) as AVG_ITEM_UNIT_PRICE,
            ROUND(AVG(BASKET.BASKET_QUANTITY), 0) as AVG_BASKET_QUANTITY, 
            ROUND(
    CASE 
        WHEN SUM(BASKET.PY_ITEM_QUANTITY) = 0 OR SUM(BASKET.PY_ITEM_TOTAL) = 0 THEN 0
        ELSE SUM(BASKET.PY_ITEM_TOTAL) / SUM(BASKET.PY_ITEM_QUANTITY)
    END, 2) as AVG_PY_ITEM_UNIT_PRICE,
            COUNT(basket.USER_IDENTIFIER) as SAMPLE_SIZE,
            DATEDIFF(week, DATEADD(day, 4, BASKET.TRANSACTION_DATE), DATEADD(day, 4, CURRENT_DATE)) AS MAX_WKS_AGO
FROM COALESCE_CTE as BASKET
INNER JOIN BASKET as BASKET2 ON BASKET2.unique_key = BASKET.unique_key
;
