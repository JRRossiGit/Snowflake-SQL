-- SQL Script: Transforming a FACT SALES table into a table with TY-LY numeric columns
-- Version: 2.0
-- Last Updated: 2024-11-22

-- Step 1: Create a CTE for date framework
WITH CTE_DATE AS (
    SELECT 
        DATE, 
        PY_DATE, 
        YEAR_NUMBER, 
        PERIOD_NUMBER, 
        WEEK_OF_PERIOD_NUMBER, 
        DAY_OF_YEAR_NUMBER
    FROM DIM_DATE
),

-- Step 2: Build the base structure with weighting and region filters
CTE_BASE AS (
    SELECT DISTINCT 
        BASKET.unique_key AS UNIQUE_KEY,
        TRANSACTION_DATE,
        TRANSACTION_ID,
        ITEM_ID,
        BASKET.USER_IDENTIFIER,
        BANNER_ID,
        STORE_NUMBER,
        ITEM_UNIT_PRICE,
        FACTORING,
        WEIGHTING,
        RD.LAST_UPDATE,
        ROUND(FACTORING * DEMO_WEIGHT * ITEM_TOTAL, 2) AS ITEM_TOTAL2,
        ROUND(FACTORING * DEMO_WEIGHT * ITEM_QUANTITY, 0) AS ITEM_QUANTITY2,
        ROUND(FACTORING * DEMO_WEIGHT * BASKET_QUANTITY, 0) AS BASKET_QUANTITY2,
        ROUND(FACTORING * DEMO_WEIGHT * BASKET_SUBTOTAL, 2) AS BASKET_SUBTOTAL2
    FROM BASKET
    INNER JOIN PEOPLE ON PEOPLE.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
    INNER JOIN USER_STATS AS US ON RD.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
    INNER JOIN REGION_DEMOGRAPHICS AS RD ON RD.ZIPCODE = PEOPLE.POSTAL_CODE
    WHERE RD.REGION_OWNER = 'PLACEHOLDER'
      AND DEMO_WEIGHT IS NOT NULL
      AND FACTORING IS NOT NULL
      AND RD.LAST_UPDATE = (SELECT MAX(LAST_UPDATE) FROM USER_STATS)
      AND BASKET.TRANSACTION_DATE >= (SELECT MAX(START_DATE) FROM USER_STATS)
    UNION
    SELECT DISTINCT 
        BASKET.unique_key AS UNIQUE_KEY,
        TRANSACTION_DATE,
        TRANSACTION_ID,
        ITEM_ID,
        BASKET.USER_IDENTIFIER,
        BANNER_ID,
        STORE_NUMBER,
        ITEM_UNIT_PRICE,
        FACTORING,
        WEIGHTING,
        RD.LAST_UPDATE,
        ROUND(FACTORING * WEIGHTING * ITEM_TOTAL, 2) AS ITEM_TOTAL2,
        ROUND(FACTORING * WEIGHTING * ITEM_QUANTITY, 0) AS ITEM_QUANTITY2,
        ROUND(FACTORING * WEIGHTING * BASKET_QUANTITY, 0) AS BASKET_QUANTITY2,
        ROUND(FACTORING * WEIGHTING * BASKET_SUBTOTAL, 2) AS BASKET_SUBTOTAL2
    FROM BASKET
    INNER JOIN PEOPLE ON PEOPLE.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
    INNER JOIN USER_STATS AS RD ON RD.USER_IDENTIFIER = BASKET.USER_IDENTIFIER
    INNER JOIN REGION_DEMOGRAPHICS AS RD ON RD.ZIPCODE = PEOPLE.POSTAL_CODE
    WHERE RD.REGION_OWNER = 'PLACEHOLDER'
      AND WEIGHTING IS NOT NULL
      AND FACTORING IS NOT NULL
      AND RD.LAST_UPDATE = (SELECT DATEADD(YEAR, -1, MAX(LAST_UPDATE)) FROM USER_STATS)
      AND BASKET.TRANSACTION_DATE <= (SELECT DATEADD(YEAR, -1, MAX(LAST_UPDATE)) FROM USER_STATS)
      AND BASKET.TRANSACTION_DATE >= (SELECT DATEADD(YEAR, -1, MAX(START_DATE)) FROM USER_STATS)
),

-- Step 3: Create key mappings for TY and LY comparisons
CTE_KEY AS (
    SELECT 
        UNIQUE_KEY,
        TRANSACTION_DATE,
        TRANSACTION_ID,
        ITEM_ID,
        USER_IDENTIFIER,
        BANNER_ID,
        STORE_NUMBER,
        ITEM_UNIT_PRICE,
        ITEM_TOTAL2,
        ITEM_QUANTITY2,
        BASKET_QUANTITY2,
        BASKET_SUBTOTAL2,
        T2.PY_DATE AS PRIOR_YEAR_DATE,
        T3.DATE AS FUTURE_YEAR_DATE
    FROM CTE_BASE T1
    LEFT JOIN CTE_DATE T2 ON T1.TRANSACTION_DATE = T2.DATE
    LEFT JOIN CTE_DATE T3 ON T1.TRANSACTION_DATE = T3.PY_DATE
),

-- Step 4: Create a matrix for TY-LY comparisons
CTE_MATRIX AS (
    SELECT 
        PRIOR_YEAR_DATE,
        UNIQUE_KEY, 
        TRANSACTION_DATE,
        STORE_NUMBER,
        TRANSACTION_ID,
        BANNER_ID,
        USER_IDENTIFIER,
        ITEM_ID
    FROM CTE_KEY
    UNION
    SELECT 
        TRANSACTION_DATE,
        UNIQUE_KEY, 
        FUTURE_YEAR_DATE,
        STORE_NUMBER,
        TRANSACTION_ID,
        BANNER_ID,
        USER_IDENTIFIER,
        ITEM_ID
    FROM CTE_KEY
),

-- Step 5: Create TY-LY comparison columns
COALESCE_CTE AS (
    SELECT DISTINCT
        m.TRANSACTION_DATE,
        m.UNIQUE_KEY,
        m.STORE_NUMBER,
        m.PRIOR_YEAR_DATE,
        m.TRANSACTION_ID,
        m.BANNER_ID,
        m.USER_IDENTIFIER,
        m.ITEM_ID,
        COALESCE(ty.BASKET_QUANTITY2, 0) AS BASKET_QUANTITY,
        COALESCE(ty.BASKET_SUBTOTAL2, 0) AS BASKET_SUBTOTAL,
        COALESCE(ty.ITEM_TOTAL2, 0) AS ITEM_TOTAL,
        COALESCE(ty.ITEM_QUANTITY2, 0) AS ITEM_QUANTITY,
        COALESCE(ty.ITEM_UNIT_PRICE, 0) AS ITEM_UNIT_PRICE,
        COALESCE(ly.BASKET_QUANTITY2, 0) AS PY_BASKET_QUANTITY,
        COALESCE(ly.BASKET_SUBTOTAL2, 0) AS PY_BASKET_SUBTOTAL,
        COALESCE(ly.ITEM_QUANTITY2, 0) AS PY_ITEM_QUANTITY,
        COALESCE(ly.ITEM_UNIT_PRICE, 0) AS PY_ITEM_UNIT_PRICE,
        COALESCE(ly.ITEM_TOTAL2, 0) AS PY_ITEM_TOTAL
    FROM CTE_MATRIX m
    LEFT JOIN CTE_BASE ty 
        ON m.UNIQUE_KEY = ty.UNIQUE_KEY
        AND m.STORE_NUMBER = ty.STORE_NUMBER
        AND m.TRANSACTION_DATE = ty.TRANSACTION_DATE
    LEFT JOIN CTE_BASE ly 
        ON m.UNIQUE_KEY = ly.UNIQUE_KEY
        AND m.STORE_NUMBER = ly.STORE_NUMBER
        AND m.PRIOR_YEAR_DATE = ly.TRANSACTION_DATE
),

-- Final Step: Combine data and generate the final output
SELECT DISTINCT
    CASE 
        WHEN (DATE_PART('dow', BASKET.TRANSACTION_DATE) + 1) % 7 <= 5 
        THEN DATEADD(day, 7 - ((DATE_PART('dow', BASKET.TRANSACTION_DATE) + 1) % 7), BASKET.TRANSACTION_DATE)
        ELSE DATEADD(day, 14 - ((DATE_PART('dow', BASKET.TRANSACTION_DATE) + 1) % 7), BASKET.TRANSACTION_DATE)
    END AS PERIOD_DATE,
    UNIQUE_KEY,
    TRANSACTION_ID,
    STORE_NUMBER,
    BANNER_ID,
    ITEM_ID,
    USER_IDENTIFIER,
    SUM(BASKET.ITEM_QUANTITY) AS ITEM_QUANTITY,
    SUM(BASKET.ITEM_TOTAL) AS ITEM_TOTAL,
    SUM(BASKET.BASKET_SUBTOTAL) AS BASKET_SUBTOTAL,
    SUM(BASKET.BASKET_QUANTITY) AS BASKET_QUANTITY,
    SUM(BASKET.PY_ITEM_QUANTITY) AS PY_ITEM_QUANTITY,
    SUM(BASKET.PY_ITEM_TOTAL) AS PY_ITEM_TOTAL,
    ROUND(
        CASE 
            WHEN SUM(BASKET.ITEM_QUANTITY) = 0 THEN 0
            ELSE SUM(BASKET.ITEM_TOTAL) / SUM(BASKET.ITEM_QUANTITY)
        END, 2
    ) AS AVG_ITEM_UNIT_PRICE,
    ROUND(
        CASE 
            WHEN SUM(BASKET.PY_ITEM_QUANTITY) = 0 THEN 0
            ELSE SUM(BASKET.PY_ITEM_TOTAL) / SUM(BASKET.PY_ITEM_QUANTITY)
        END, 2
    ) AS AVG_PY_ITEM_UNIT_PRICE,
    COUNT(BASKET.USER_IDENTIFIER) AS SAMPLE_SIZE
FROM COALESCE_CTE BASKET
GROUP BY PERIOD_DATE, UNIQUE_KEY, TRANSACTION_ID, STORE_NUMBER, BANNER_ID, ITEM_ID, USER_IDENTIFIER;
